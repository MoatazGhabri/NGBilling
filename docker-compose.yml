services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ngbilling-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ngbilling
      MYSQL_USER: ngbilling
      MYSQL_PASSWORD: ngbilling123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/src/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ngbilling-network
    command: >
      --default-authentication-plugin=mysql_native_password
      --max_allowed_packet=64M
      --innodb_buffer_pool_size=256M
      --innodb_log_file_size=64M
      --innodb_log_buffer_size=16M
      --query_cache_size=32M
      --tmp_table_size=64M
      --max_heap_table_size=64M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "ngbilling", "-pngbilling123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ngbilling-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ngbilling
      DB_PASSWORD: ngbilling123
      DB_DATABASE: ngbilling
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3001
      CORS_ORIGIN: "*"
    ports:
      - "3001:3001"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ngbilling-network
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ngbilling-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://31.97.177.87:3001/api/v1
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - ngbilling-network

  # Nginx Reverse Proxy (Optional)
  # nginx:
  #   image: nginx:alpine
  #   container_name: ngbilling-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - ngbilling-network

volumes:
  mysql_data:

networks:
  ngbilling-network:
    driver: bridge 